),
n_miss = sum(
color_target & !color_response,
position_target & !position_response,
sound_target & !sound_response,
figure_target & !figure_response,
na.rm = T
),
n_cr = sum(
!color_target & !color_response,
!position_target & !position_response,
!sound_target & !sound_response,
!figure_target & !figure_response,
na.rm = T
)
)
# Add computed SDT stuff
cbind(df, psycho::dprime(df$n_hit, df$n_fa, df$n_miss, df$n_cr))
}
# Pretest-posttest
D_test = D_all %>%
# Only pretest and posttest
filter(phase %in% c('pretest', 'posttest')) %>%
# Calculate SDT measures for each participant for each task and phase
group_by(id, task, phase, instruction) %>%
add_dprime()
# Identify data to be excluded
remove_these = D_test %>%
group_by(task) %>%
filter(phase == 'pretest', task %in% c('PC2', 'CS2')) %>%
filter(dprime < 0.6) %>%
select(id, task, instruction, dprime) %>%
group_by(id) %>%
tally() %>%
filter(n == 2)
D_test = filter(D_test, !id %in% remove_these$id)
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
dodge <- position_dodge(width = 0.9)
ggplot(D_semiwide, aes(x=task, y=dprime, fill=instruction)) +
#tidybayes::stat_interval(position=position_dodge(width=0.5)) +
stat_summary(fun.y = mean, geom='bar', position=dodge) +
stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Transfer effects', x='Task on transfer spectrum', y='dprime improvement') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.8, 0.85),
legend.direction='vertical',
legend.background = element_blank(),
legend.title = element_text(size = rel(0.5))
)
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
ggplot(D_semiwide, aes(x=task, y=dprime, fill=instruction)) +
#tidybayes::stat_interval(position=position_dodge(width=0.5)) +
#stat_summary(fun.y = mean, geom='bar', position=dodge) +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Transfer effects', x='Task on transfer spectrum', y='dprime improvement') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.8, 0.85),
legend.direction='vertical',
legend.background = element_blank(),
legend.title = element_text(size = rel(0.5))
)
D_semiwide = D_test %>%
# Now make one column for each of these values for pretest and posttest
# Thanks to https://community.rstudio.com/t/spread-with-multiple-value-columns/5378/5 for this approach
ungroup() %>%
mutate(phase = recode_factor(phase, pretest = 'pre', posttest = 'post')) %>%  # shorter column names
nest(score,
dprime,
n_hit,
n_fa,
n_miss,
n_cr,
beta,
aprime,
bppd,
c,
.key = 'value_col') %>%
spread(key = phase, value = value_col) %>%
unnest(pre, post, .sep = '_') %>%
# Compute difference
mutate(score = post_score - pre_score,
dprime = post_dprime - pre_dprime)
ggplot(D_semiwide, aes(x=task, y=dprime, fill=instruction)) +
#tidybayes::stat_interval(position=position_dodge(width=0.5)) +
#stat_summary(fun.y = mean, geom='bar', position=dodge) +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Transfer effects', x='Task on transfer spectrum', y='dprime improvement') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.8, 0.85),
legend.direction='vertical',
legend.background = element_blank(),
legend.title = element_text(size = rel(0.5))
)
D_test$task
D_semiwide = D_test %>%
# Now make one column for each of these values for pretest and posttest
# Thanks to https://community.rstudio.com/t/spread-with-multiple-value-columns/5378/5 for this approach
ungroup() %>%
mutate(phase = recode_factor(phase, pretest = 'pre', posttest = 'post')) %>%  # shorter column names
nest(score,
dprime,
n_hit,
n_fa,
n_miss,
n_cr,
beta,
aprime,
bppd,
c,
.key = 'value_col') %>%
spread(key = phase, value = value_col) %>%
unnest(pre, post, .sep = '_') %>%
# Compute difference
mutate(score = post_score - pre_score,
dprime = post_dprime - pre_dprime)
D_semiwide
D_semiwide = D_test %>%
# Now make one column for each of these values for pretest and posttest
# Thanks to https://community.rstudio.com/t/spread-with-multiple-value-columns/5378/5 for this approach
ungroup() %>%
mutate(phase = recode_factor(phase, pretest = 'pre', posttest = 'post')) %>%  # shorter column names
nest(score,
dprime,
n_hit,
n_fa,
n_miss,
n_cr,
beta,
aprime,
bppd,
c,
.key = 'value_col') %>%
spread(key = phase, value = value_col) %>%
unnest(pre, post, .sep = '_') %>%
# Compute difference
mutate(score = post_score - pre_score,
dprime = post_dprime - pre_dprime)
library(tidyverse)
# Read all data. Shorter phase names
D_all = readbulk::read_bulk('data_real') %>%
mutate(
score_avg = mean(c(color_score, position_score, sound_score, figure_score), na.rm = T),
phase = factor(phase, levels=c('practice', 'pretest', 'training', 'posttest')),
instruction = factor(instruction, labels=c('transfer', 'training')),
task = as.character(task),
task = recode(task, pc2 = 'PC2', fc2 = 'CS2', pcs1 = 'PAC1', fcs1 = 'ACS1', pcfs12 = 'PACS1'),
task = factor(task, levels=c('ps2', 'PC2', 'CS2', 'PAC1', 'ACS1', 'PACS1', 'p1', 'f2', 'sc2', 'pcfs1')),
)
# Compute d-prime measures (using psych::dprime) on the current df groupings.
add_dprime = function(df) {
df = df %>%
summarise(
score = mean(score_avg),
n_hit = sum(
color_target & color_response,
position_target & position_response,
sound_target & sound_response,
figure_target & figure_response,
na.rm = T
),
n_fa = sum(
!color_target & color_response,
!position_target & position_response,
!sound_target & sound_response,
!figure_target & figure_response,
na.rm = T
),
n_miss = sum(
color_target & !color_response,
position_target & !position_response,
sound_target & !sound_response,
figure_target & !figure_response,
na.rm = T
),
n_cr = sum(
!color_target & !color_response,
!position_target & !position_response,
!sound_target & !sound_response,
!figure_target & !figure_response,
na.rm = T
)
)
# Add computed SDT stuff
cbind(df, psycho::dprime(df$n_hit, df$n_fa, df$n_miss, df$n_cr))
}
# Pretest-posttest
D_test = D_all %>%
# Only pretest and posttest
filter(phase %in% c('pretest', 'posttest')) %>%
# Calculate SDT measures for each participant for each task and phase
group_by(id, task, phase, instruction) %>%
add_dprime()
# Identify data to be excluded
remove_these = D_test %>%
group_by(task) %>%
filter(phase == 'pretest', task %in% c('PC2', 'CS2')) %>%
filter(dprime < 0.6) %>%
select(id, task, instruction, dprime) %>%
group_by(id) %>%
tally() %>%
filter(n == 2)
D_test = filter(D_test, !id %in% remove_these$id)
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
D_semiwide = D_test %>%
# Now make one column for each of these values for pretest and posttest
# Thanks to https://community.rstudio.com/t/spread-with-multiple-value-columns/5378/5 for this approach
ungroup() %>%
mutate(phase = recode_factor(phase, pretest = 'pre', posttest = 'post')) %>%  # shorter column names
nest(score,
dprime,
n_hit,
n_fa,
n_miss,
n_cr,
beta,
aprime,
bppd,
c,
.key = 'value_col') %>%
spread(key = phase, value = value_col) %>%
unnest(pre, post, .sep = '_') %>%
# Compute difference
mutate(score = post_score - pre_score,
dprime = post_dprime - pre_dprime)
D_semiwide = D_test %>%
# Now make one column for each of these values for pretest and posttest
# Thanks to https://community.rstudio.com/t/spread-with-multiple-value-columns/5378/5 for this approach
ungroup() %>%
mutate(phase = recode_factor(phase, pretest = 'pre', posttest = 'post')) %>%  # shorter column names
nest(score,
dprime,
n_hit,
n_fa,
n_miss,
n_cr,
beta,
aprime,
bppd,
c,
.key = 'value_col')
D_semiwide = D_test %>%
# Now make one column for each of these values for pretest and posttest
# Thanks to https://community.rstudio.com/t/spread-with-multiple-value-columns/5378/5 for this approach
ungroup() %>%
mutate(phase = recode_factor(phase, pretest = 'pre', posttest = 'post'))
D_semiwide = D_test %>%
# Now make one column for each of these values for pretest and posttest
# Thanks to https://community.rstudio.com/t/spread-with-multiple-value-columns/5378/5 for this approach
ungroup() %>%
mutate(phase = recode_factor(phase, pretest = 'pre', posttest = 'post')) %>%  # shorter column names
nest(score,
dprime,
n_hit,
n_fa,
n_miss,
n_cr,
beta,
aprime,
bppd,
c,
.key = 'value_col')
D_semiwide = D_test %>%
# Now make one column for each of these values for pretest and posttest
# Thanks to https://community.rstudio.com/t/spread-with-multiple-value-columns/5378/5 for this approach
ungroup() %>%
mutate(phase = recode_factor(phase, pretest = 'pre', posttest = 'post')) %>%  # shorter column names
nest(score,
dprime,
n_hit,
n_fa,
n_miss,
n_cr,
beta,
aprime,
bppd,
c,
.key = 'value_col') %>%
spread(key = phase, value = value_col) %>%
unnest(pre, post, .sep = '_') %>%
# Compute difference
mutate(score = post_score - pre_score,
dprime = post_dprime - pre_dprime)
D_semiwide = D_test %>%
# Now make one column for each of these values for pretest and posttest
# Thanks to https://community.rstudio.com/t/spread-with-multiple-value-columns/5378/5 for this approach
ungroup() %>%
mutate(phase = recode_factor(phase, pretest = 'pre', posttest = 'post')) %>%  # shorter column names
nest(score,
dprime,
n_hit,
n_fa,
n_miss,
n_cr,
beta,
aprime,
bppd,
c,
.key = 'value_col') %>%
spread(key = phase, value = value_col)
# Plot
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
# Is there differential improvement between tasks?
X1 = lmBF(dprime ~ task * phase * instruction, D_test, whichRandom='id')
X2 = lmBF(dprime ~ task * phase * instruction - task:phase:instruction, D_test, whichRandom='id')
X1 / X2  # BF
summary(posterior(X1, iterations = 1000))  # Estimates
library(tidyverse)
library(BayesFactor)
# Is there differential improvement between tasks?
X1 = lmBF(dprime ~ task * phase * instruction, D_test, whichRandom='id')
X2 = lmBF(dprime ~ task * phase * instruction - task:phase:instruction, D_test, whichRandom='id')
X1 / X2  # BF
summary(posterior(X1, iterations = 1000))  # Estimates
# Plot
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
#tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
geom_point() +
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
# Plot
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
#tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
geom_jitter(height=0, width=0.2) +
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
# Plot
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
geom_jitter(height=0, width=0.1) +
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
# Plot
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
geom_jitter(height=0, width=0.0) +
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
# Plot
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
geom_jitter(height=0, width=0.0, position=position_dodge(width=0.6)) +
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
# Plot
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
geom_jitter(aes(group=phase), height=0, width=0.0) +
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
# Plot
ggplot(D_test, aes(x=instruction, y=dprime, fill=phase)) +
#stat_summary(fun.y = mean, geom='bar', position='dodge') +
#stat_summary(fun.data = mean_cl_boot, geom='errorbar', position=dodge, width=0.2, color='#555555') +
tidybayes::stat_interval(position=position_dodge(width=0.6)) +  # Dodge does not work
facet_grid(~task) +
scale_fill_manual(values=c('black', 'gray')) +
ggthemes::theme_wsj(13) +
labs(title='Test scores', x='instruction', y='dprime') +
theme(
axis.title = element_text(size = rel(0.5)),
axis.text.x = element_text(angle=90),
legend.position = c(0.1, 0.8),
legend.direction='vertical',
legend.title = element_text(size = rel(0.5)),
legend.background = element_blank()
)
